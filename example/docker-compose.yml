services:
  setup:
    # create CAs and certificates for this example
    image: ghcr.io/fopina/minica:alpine
    entrypoint: "/bin/sh -c"
    command: >
      "
      test -e /data/certs/good-one.pem && exit 0 ||
      mkdir -p /data/certs &&
      minica -ca-cert /data/certs/good-one.pem -ca-key /data/certs/good-one-key.pem -ca-cn "good-one" -domains '*.7f000001.nip.io' &&
      minica -ca-cert /data/certs/good-one.pem -ca-key /data/certs/good-one-key.pem -domains 'auth-client' &&
      minica -ca-cert /data/certs/good-one.pem -ca-key /data/certs/good-one-key.pem -domains 'auth2-client' &&
      minica -ca-cert /data/certs/good-one.pem -ca-key /data/certs/good-one-key.pem -domains 'not-auth-client' &&
      minica -ca-cert /data/certs/bad-one.pem -ca-key /data/certs/bad-one-key.pem -ca-cn "bad-one" -domains 'bad-client' &&
      cp -a _.7f000001.nip.io /data/certs/ &&
      cp -a auth-client /data/certs/ &&
      cp -a auth2-client /data/certs/ &&
      cp -a not-auth-client /data/certs/ &&
      cp -a bad-client /data/certs/
      "
    volumes:
      - ./traefik_config/:/data

  traefik:
    image: traefik:v2.9
    depends_on:
      - setup
    networks:
      default:
        aliases:
          # just for running bats tests within container network
          # same hostnames also work outside, on different port :)
          - whoami.7f000001.nip.io
          - whoami-mtls.7f000001.nip.io
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
      - --entrypoints.webtls.address=:443
      - --entrypoints.webtls.http.tls.options=mtlsTest@file
    ports:
      - 127.0.0.1:8888:80
      - 127.0.0.1:8889:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik_config/:/etc/traefik/dynamic/

  whoami:
    image: traefik/whoami
    labels:
      traefik.http.services.whoami.loadbalancer.server.port: 80
      traefik.http.routers.whoamix.rule: Host(`whoami.7f000001.nip.io`)
      traefik.http.routers.whoamix.entrypoints: webtls
      traefik.http.routers.whoamix.tls: "true"
      traefik.http.middlewares.pass-certificate-info.passTLSClientCert.info.subject.commonName: 'true'
      # set X-Allow-CN header to comma-separated list of common names
      # TLS clients might send the full chain (peer certificate and CA) and Traefik will add the CN of all of them to the header
      traefik.http.middlewares.allow-cns-header.headers.customrequestheaders.X-Allow-CN: Subject%3D%22CN%3Dauth-client%22,Subject%3D%22CN%3Dauth-client%22%2CSubject%3D%22CN%3Dgood-one%22,Subject%3D%22CN%3Dauth2-client%22,Subject%3D%22CN%3Dauth2-client%22%2CSubject%3D%22CN%3Dgood-one%22
      traefik.http.middlewares.validate-cn.forwardauth.address: http://validate-cn:8080/
      traefik.http.routers.whoamix2.rule: Host(`whoami-mtls.7f000001.nip.io`)
      traefik.http.routers.whoamix2.entrypoints: webtls
      traefik.http.routers.whoamix2.tls: "true"
      traefik.http.routers.whoamix2.tls.options: mtlsTest@file
      traefik.http.routers.whoamix2.middlewares: pass-certificate-info,allow-cns-header,validate-cn

  validate-cn:
    build:
      context: ../
      dockerfile: example/Dockerfile.build
    command: --debug

  test:
    # run bats tests to assert everything is as expected!
    depends_on:
    - traefik
    - whoami
    - validate-cn
    build:
      context: .
      dockerfile: Dockerfile.tests
    command: ./tests.bats
    volumes:
      - ./:/tests:ro
